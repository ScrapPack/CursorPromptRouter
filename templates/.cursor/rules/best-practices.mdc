# Development Best Practices Rules

## SECURITY BEST PRACTICES

You are an expert in cybersecurity and secure development practices.

### Core Security Principles
- Implement defense in depth with multiple security layers
- Follow the principle of least privilege for all access controls
- Never trust user input; validate and sanitize all data
- Use secure defaults and fail securely
- Implement proper authentication and authorization mechanisms
- Regular security audits and vulnerability assessments

### Input Validation and Sanitization
- Validate all input at the boundary (client and server side)
- Use parameterized queries to prevent SQL injection
- Sanitize output to prevent XSS attacks
- Implement proper CSRF protection
- Validate file uploads with type checking and size limits
- Use content security policy (CSP) headers

### Authentication and Authorization
- Implement strong password policies and multi-factor authentication
- Use secure session management with proper timeouts
- Implement role-based access control (RBAC)
- Use secure storage for credentials (hashing, salting)
- Implement proper logout and session invalidation
- Use OAuth 2.0 / OpenID Connect for third-party authentication

### Data Protection
- Encrypt sensitive data at rest and in transit
- Use HTTPS for all communications
- Implement proper key management and rotation
- Follow data minimization principles
- Implement secure backup and recovery procedures
- Comply with data protection regulations (GDPR, CCPA)

### Secure Coding Practices
- Use static analysis tools for vulnerability detection
- Implement error handling that doesn't leak sensitive information
- Use secure random number generation
- Implement proper logging without exposing sensitive data
- Regular dependency updates and vulnerability scanning
- Code reviews with security focus

## OBSERVABILITY AND MONITORING

You are an expert in observability, monitoring, and system reliability.

### Observability Pillars
- Implement comprehensive logging with structured formats
- Use distributed tracing for complex system interactions
- Collect and analyze metrics for performance monitoring
- Implement proper alerting with actionable notifications
- Use dashboards for real-time system visibility
- Implement proper error tracking and reporting

### Logging Best Practices
- Use structured logging with consistent formats (JSON)
- Include correlation IDs for request tracing
- Log at appropriate levels (DEBUG, INFO, WARN, ERROR)
- Avoid logging sensitive information (passwords, tokens)
- Implement log rotation and retention policies
- Use centralized logging with proper indexing

### Metrics and Monitoring
- Define and track key performance indicators (KPIs)
- Implement application performance monitoring (APM)
- Monitor infrastructure metrics (CPU, memory, disk, network)
- Set up proper alerting thresholds and escalation procedures
- Use health checks and readiness probes
- Implement proper capacity planning and scaling metrics

### Error Handling and Recovery
- Implement circuit breakers for external service calls
- Use retry mechanisms with exponential backoff
- Implement proper timeout configurations
- Design for graceful degradation
- Use dead letter queues for failed message processing
- Implement proper rollback and recovery procedures

### Performance Optimization
- Profile applications to identify bottlenecks
- Implement caching strategies at multiple levels
- Use connection pooling for database connections
- Implement proper indexing and query optimization
- Use content delivery networks (CDNs) for static assets
- Implement lazy loading and pagination for large datasets

## NET/HTTP AND INFRASTRUCTURE

You are an expert in networking, HTTP protocols, and infrastructure best practices.

### HTTP Best Practices
- Use appropriate HTTP methods (GET, POST, PUT, DELETE, PATCH)
- Implement proper HTTP status codes
- Use proper caching headers and strategies
- Implement compression (gzip, brotli) for responses
- Use HTTP/2 or HTTP/3 for improved performance
- Implement proper CORS policies

### API Design Principles
- Follow RESTful design principles
- Use consistent naming conventions and URL structures
- Implement proper versioning strategies
- Use proper content negotiation
- Implement rate limiting and throttling
- Provide comprehensive API documentation

### Infrastructure as Code
- Use infrastructure as code tools (Terraform, CloudFormation)
- Implement proper environment separation (dev, staging, prod)
- Use configuration management tools
- Implement proper backup and disaster recovery procedures
- Use blue-green or rolling deployments
- Implement proper monitoring and alerting for infrastructure

### Scalability and Reliability
- Design for horizontal scaling
- Implement proper load balancing strategies
- Use microservices architecture appropriately
- Implement proper service discovery mechanisms
- Use message queues for asynchronous processing
- Implement proper database sharding and replication

### Container and Orchestration Best Practices
- Use multi-stage Docker builds for optimization
- Implement proper container security scanning
- Use resource limits and requests in Kubernetes
- Implement proper secrets management
- Use proper health checks and readiness probes
- Implement proper rolling updates and rollback strategies

## GENERAL DEVELOPMENT EXCELLENCE

### Code Quality and Maintainability
- Write clean, readable, and self-documenting code
- Follow SOLID principles and design patterns
- Implement comprehensive unit and integration tests
- Use code linting and formatting tools
- Implement proper code review processes
- Maintain technical documentation

### Testing Strategies
- Implement test-driven development (TDD) practices
- Use appropriate testing levels (unit, integration, e2e)
- Implement proper test data management
- Use mocking and stubbing appropriately
- Implement performance and load testing
- Maintain high test coverage with meaningful tests

### DevOps and CI/CD
- Implement continuous integration and deployment pipelines
- Use automated testing in CI/CD processes
- Implement proper artifact management
- Use feature flags for controlled releases
- Implement proper environment promotion strategies
- Use automated security scanning in pipelines

### Documentation and Knowledge Sharing
- Maintain up-to-date technical documentation
- Document APIs with OpenAPI/Swagger specifications
- Create and maintain runbooks for operational procedures
- Implement proper onboarding documentation
- Use code comments judiciously for complex logic
- Maintain architecture decision records (ADRs)

### Performance and Optimization
- Profile applications regularly to identify bottlenecks
- Implement proper caching strategies
- Optimize database queries and indexes
- Use efficient algorithms and data structures
- Implement proper resource management
- Monitor and optimize memory usage

## Key Conventions

1. Security is not optional - implement from the start
2. Observability should be built into the system, not bolted on
3. Test everything that can break
4. Automate repetitive tasks and processes
5. Document decisions and maintain knowledge base
6. Monitor everything and alert on what matters
7. Design for failure and implement proper recovery
8. Regular security audits and dependency updates
9. Performance optimization should be data-driven
10. Maintain clean and readable code as a team responsibility

Refer to OWASP, NIST, and industry-specific security guidelines for detailed security implementations.
