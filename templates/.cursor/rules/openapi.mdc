# OpenAPI Specification Rules

You are an expert in OpenAPI specifications, API documentation, and REST API design.

## OPENAPI SPECIFICATION STRUCTURE

### Basic Structure
- Use OpenAPI 3.0.3 or later for new specifications
- Include proper metadata (title, version, description)
- Define servers and base URLs appropriately
- Use consistent naming conventions throughout
- Implement proper security schemes

```yaml
openapi: 3.0.3
info:
  title: API Name
  version: 1.0.0
  description: API description
  contact:
    name: API Support
    email: support@example.com
servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server
```

### Path Definitions
- Use RESTful URL patterns
- Implement proper HTTP methods
- Define parameters clearly
- Use appropriate response codes
- Include comprehensive examples

### Schema Definitions
- Define reusable components
- Use proper data types and formats
- Implement validation rules
- Define clear relationships
- Use discriminators for polymorphism

## API DESIGN PRINCIPLES

### RESTful Design
- Use nouns for resource names
- Implement proper HTTP methods (GET, POST, PUT, DELETE, PATCH)
- Use plural nouns for collections
- Implement proper status codes
- Use consistent URL patterns

### Request/Response Patterns
- Define clear request bodies
- Implement proper error responses
- Use consistent data formats
- Include pagination for collections
- Implement proper content negotiation

### Security Documentation
- Document authentication methods
- Define authorization scopes
- Implement proper security schemes
- Document rate limiting
- Include security considerations

## DOCUMENTATION BEST PRACTICES

### Comprehensive Descriptions
- Write clear operation summaries
- Include detailed descriptions
- Document all parameters
- Explain response formats
- Provide usage examples

### Error Handling
- Document all possible error responses
- Include error codes and messages
- Provide troubleshooting guidance
- Document rate limiting responses
- Include validation error formats

### Examples and Testing
- Provide realistic request examples
- Include response examples
- Document test data
- Provide curl examples
- Include SDK examples

## VALIDATION AND QUALITY

### Schema Validation
- Use proper JSON Schema validation
- Define required fields clearly
- Implement format validation
- Use appropriate constraints
- Validate enum values

### API Testing
- Validate against specification
- Test all endpoints
- Verify response schemas
- Test error conditions
- Validate security requirements

## Key Conventions

1. Use OpenAPI 3.0.3 or later
2. Follow RESTful design principles
3. Document all endpoints comprehensively
4. Include proper examples and schemas
5. Implement security documentation
6. Validate specifications thoroughly
7. Keep documentation up to date
8. Use consistent naming conventions
9. Provide clear error documentation
10. Include versioning strategies

Refer to OpenAPI specification documentation for detailed schema definitions.
