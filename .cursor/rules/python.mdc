# Python Development Rules

You are an expert in Python, FastAPI, Flask, and modern Python development practices.

## Code Style and Structure

- Write concise, technical Python code with accurate examples
- Use functional and declarative programming patterns; avoid unnecessary classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., is_loading, has_error)
- Structure files: imports, constants, classes/functions, main execution

## Python Version and Standards

- Use Python 3.9+ with type hints
- Follow PEP 8 style guidelines
- Use black for code formatting
- Use isort for import sorting
- Use flake8 or ruff for linting

## Type Hints and Validation

- Use type hints for all function signatures and class attributes
- Use Pydantic for data validation and serialization
- Use Union, Optional, and other typing utilities appropriately
- Implement proper type checking with mypy

## FastAPI Guidelines

- Use FastAPI for API development
- Implement proper async/await patterns
- Use dependency injection for shared resources
- Implement proper request/response models with Pydantic
- Use proper HTTP status codes and exception handling
- Implement proper authentication and authorization
- Use proper database sessions and connection pooling
- Implement proper logging and monitoring

## Flask Guidelines (when applicable)

- Use Flask-SQLAlchemy for database operations
- Implement proper application factory pattern
- Use blueprints for modular application structure
- Implement proper error handling and logging
- Use proper session management
- Implement CSRF protection

## Error Handling and Validation

- Use proper exception handling with try/except blocks
- Implement custom exception classes for specific error types
- Use proper logging with the logging module
- Validate input data using Pydantic or similar libraries
- Handle edge cases and error conditions early in functions
- Use early returns for error conditions

## Database and ORM

- Use SQLAlchemy for database operations
- Implement proper database migrations
- Use connection pooling for performance
- Implement proper transaction handling
- Use database indexes appropriately
- Implement proper query optimization

## Async Programming

- Use async/await for I/O bound operations
- Use asyncio for concurrent programming
- Implement proper async context managers
- Use async database drivers when available
- Handle async exceptions properly

## Testing

- Write unit tests using pytest
- Use fixtures for test setup and teardown
- Implement integration tests for API endpoints
- Use mocking for external dependencies
- Implement proper test coverage reporting
- Use parametrized tests for multiple test cases

## Security

- Use environment variables for sensitive configuration
- Implement proper input validation and sanitization
- Use parameterized queries to prevent SQL injection
- Implement proper authentication and authorization
- Use HTTPS for all communications
- Implement rate limiting and DDoS protection

## Performance

- Use appropriate data structures for different use cases
- Implement caching where appropriate
- Use database indexing for query optimization
- Profile code to identify performance bottlenecks
- Use async programming for I/O bound operations
- Implement proper connection pooling

## Dependency Management

- Use pip with requirements.txt or pipenv/poetry for dependency management
- Pin dependency versions for reproducible builds
- Use virtual environments for isolation
- Keep dependencies up to date with security patches

## Documentation

- Write clear docstrings for all functions and classes
- Use proper documentation format (Google, NumPy, or Sphinx style)
- Include type information in docstrings
- Document API endpoints with proper OpenAPI/Swagger documentation

## Project Structure

```
project/
├── app/
│   ├── __init__.py
│   ├── main.py
│   ├── models/
│   ├── routers/
│   ├── services/
│   └── utils/
├── tests/
├── requirements.txt
├── .env.example
└── README.md
```

## Key Conventions

- Use snake_case for variables and functions
- Use PascalCase for classes
- Use UPPER_CASE for constants
- Use descriptive variable names
- Keep functions small and focused
- Use list comprehensions and generator expressions appropriately
- Implement proper error handling and logging
- Use context managers for resource management
