---
agentRequested: true
description: "General task implementation and feature development workflow template"
---

# Request Mode Template

## Overview
For general task implementation and feature development. This is the default mode for building new functionality, integrating components, or implementing specific requirements.

## Execution Workflow

When in Request mode, follow this structured approach:

### 1. Blueprint (≤5 bullets)
- Restate goal: "I will…"
- Outline major steps:  
  1. <Step 1>  
  2. <Step 2>  
  3. <Step 3>  
- Note any special constraints or dependencies.

> If YOLO_MODE=off and you're unsure, present this plan and await approval; else proceed immediately.

### 2. Construct (Implementation)
For each plan step:
1. **Locate context**: use codebase search (`codebase_search`) and `read_file` to find relevant code.  
2. **Apply changes**: use `edit_file` to implement the logic.  
   - Follow DRY and project style.  
   - Build core functionality first; defer polish.  
3. **Commit incrementally** (optional): group related changes into logical checkpoints.

> Always "Read Before Write" and re‑read the modified code before moving on.

### 3. Validate (Test & QA Loop)
- **Run tests**: execute `<test_command>` (e.g. `npm test` or `pytest`).  
- **Run linter/static analysis**: execute `<lint_command>`.  
- **If any failures/warnings**:  
  - Analyze output.  
  - Return to Construct to fix.  
  - Repeat tests/lint until all pass.

> Use `timeout 30s … | cat` and non‑interactive flags to avoid hangs.

### 4. Report (Summary)
In chat, provide a concise summary:
- Changes made: file list + brief description.  
- Status: "All tests passing, no lint errors."  
- Any noteworthy decisions or follow‑ups.

> Do **not** paste full diffs or logs—keep it high‑level.

### 5. Context Update (Persistence)
- **context.json**: write a minimal record:  
  ```json
  {
    "last_task": "<TASK>",
    "summary": "<one‑line summary of outcome>",
    "new_deps": [ ... ],
    "next_steps": [ ... ]
  }
  ```

## Key Principles
- Read before write - always understand existing code first
- Test continuously - validate changes at each step  
- Keep it simple - build core functionality before optimization
- Document decisions - explain non-obvious choices
- Follow project conventions - maintain consistency with existing codebase 