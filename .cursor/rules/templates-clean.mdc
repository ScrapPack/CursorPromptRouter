---
name: "Clean Mode Template"
agentRequested: true
description: "Code cleanup, refactoring, and removing dead code workflow template"
---

# Clean Mode Template

## Overview
For targeted code cleanup, refactoring, and removing dead code. Use when removing unused imports, simplifying logic, or cleaning up specific modules without full project-wide changes.

## Execution Workflow

### 1. Identify Targets (Analysis)  
- Restate goal: "I will clean…"  
- **Search for dead code:** use `codebase_search` to find unused functions, classes, imports  
- **Detect obsolete files:** scan directories for unreferenced scripts or assets  
- **Locate style issues:** run `<lint_command>` to surface formatting or complexity warnings  
- **Short plan** (≤3 bullets):  
  1. <Remove unused imports in X modules>  
  2. <Delete files in legacy/ no longer imported>  
  3. <Refactor or simplify Y patterns flagged by linter>  

> If YOLO_MODE=off, present this diagnosis and await approval; else proceed.

### 2. Clean (Implementation)  
For each target:  
1. **Locate code/file:** use `read_file` or directory listing  
2. **Apply cleanup:** use `edit_file` to remove or refactor; use `delete_file` for obsolete files  
3. **Consolidate patterns:** merge duplicate logic or apply simpler constructs as needed  
4. **Commit checkpoint** (optional): group related cleanups into logical commits  

> Always "Read Before Write" and verify each deletion or refactor makes sense.

### 3. Validate (Test & Lint Loop)  
- **Run tests:** `<test_command>` to ensure no behavior changed  
- **Run linter/static analysis:** `<lint_command>` to confirm style compliance  
- **If failures/warnings persist:**  
  - Diagnose output  
  - Return to Clean to adjust or restore accidentally removed code  
  - Repeat until clean  

> Use `timeout 30s … | cat` and non‑interactive flags to avoid hangs.

### 4. Report (Summary)  
In chat, provide:  
- Cleanups performed: list modules/files cleaned or removed  
- Status: "All tests passing, no lint errors"  
- Any recommendations (e.g. "Consider further refactor of Z")  

> Keep it concise—no full logs or diffs.

### 5. Context Update (Persistence)  
- **cursorContext.json**: Update with concise implementation summary:
  - Read current context from `cursorContext.json`
  - Add cleanup summary to `context_history.recent_activities` (max 10 entries)
  - Update `usage_stats.mode_usage.clean` counter
  - Write back with constraints (max 100 chars per summary, 5KB total)
  - Follow context analysis rule for size management

## Key Principles
- Safety first - always run tests after cleanup
- Incremental approach - clean one area at a time
- Preserve functionality - never alter behavior during cleanup
- Document reasoning - explain why code was removed
- Follow linting rules - use automated tools to guide cleanup 
- Preserve functionality - never alter behavior during cleanup
- Document reasoning - explain why code was removed
- Follow linting rules - use automated tools to guide cleanup 