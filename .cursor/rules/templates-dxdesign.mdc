---
name: "DXDesign Mode Template"
agentRequested: true
description: "Developer experience improvements, tooling, CLI enhancements workflow template"
---

# DXDesign Mode Template

## Overview
For improving developer experience through better tooling, CLI interfaces, error messages, and development workflows. Use when enhancing developer-facing APIs, creating CLI tools, or improving development ergonomics.

## Execution Workflow

### 1. Scope & Goals  
- "I will enhance the developer experience by improving code clarity, documentation, and APIs."  
- **Identify targets**: list libraries, modules, CLI tools, or SDKs developers interact with.  
- **Gather context**: reference CONTRIBUTING.md, developer guides, code comments, and existing pain reports.  
- **Short plan** (≤3 bullets):  
  1. Audit current developer touchpoints (README, docstrings, error messages, CLI flags).  
  2. Pinpoint clarity gaps and friction points.  
  3. Propose prioritized improvements.

> If YOLO_MODE=off, present this scope and await approval; else proceed.

### 2. Audit Developer Touchpoints  
- **Documentation review**: open README.md, inline code comments, and API docs via `read_file`.  
- **CLI/SDK usage**: run help commands (`--help`) or import flows in REPL to observe usability.  
- **Error messages**: trigger common errors to capture and assess their clarity.  
- **Short summary**: list each touchpoint and note deficiencies (e.g. missing examples, unclear flags, ambiguous error text).

### 3. Propose & Implement Improvements  
For each identified issue:  
1. **Describe the issue**: "Function `foo()` lacks parameter descriptions."  
2. **Recommend change**:  
   - Update README or add code examples.  
   - Enhance docstrings with parameter/return docs.  
   - Simplify CLI flags and add aliases or defaults.  
   - Rewrite error messages with actionable guidance.  
3. **Apply changes**: use `edit_file` to update docs, code comments, or CLI help text.  
4. **Commit checkpoint** (optional): group related improvements.

> Always "Read Before Write" to align with existing style conventions.

### 4. Validate (Developer Walkthrough)  
- **Rebuild or reimport**: ensure no syntax issues.  
- **Try developer flows**:  
  - Follow installation steps from README.  
  - Invoke CLI commands and verify help output.  
  - Import modules in REPL and inspect docstrings.  
- **Check error clarity**: cause a known error and confirm the message guides resolution.

> Address any new friction immediately, then re-validate.

### 5. Report (Summary)  
In chat, provide:  
- Touchpoints improved: list docs, functions, CLI commands updated.  
- Examples added: number of code snippets or tutorials.  
- Developer feedback simulation: "Installation now completes in 3 steps; CLI help shows defaults."  
- Status: "All flows tested and clear."

> Keep it concise—no full dumps of docs or help text.

### 6. Context Update (Persistence)  
- **context.json**: update with  
  ```json
  {
    "last_task": "DX improvements",
    "summary": "Enhanced README, docstrings, and CLI help; validated developer flows.",
    "next_steps": ["Collect real-user feedback", "Add code samples for edge cases"]
  }
  ```

## Key Principles
- Developer empathy - understand the developer's journey and pain points
- Clear communication - make error messages actionable and helpful
- Reduce friction - minimize steps required for common tasks
- Provide examples - show, don't just tell
- Test the experience - actually use what you've improved 