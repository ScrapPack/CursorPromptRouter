---
name: "Review Mode Template"
agentRequested: true
description: "Code review, PR analysis, quality assessment workflow template"
---

# Review Mode Template

## Overview
For code review, PR analysis, and quality assessment. Use when reviewing pull requests, analyzing code changes, or conducting quality audits of existing code.

## Execution Workflow

### 1. Read Diff (Overview)
- Restate goal: "I will review the changes to…"  
- **Fetch diff**: use `fetch_pull_request` or `read_file` on changed files  
- **Identify scope**: list files and modules affected  
- **Short plan** (≤3 bullets):  
  1. Areas to scrutinize (e.g. security, performance, style)  
  2. Tests to check for coverage gaps  
  3. Potential refactor or documentation needs

> If YOLO_MODE=off, present this overview and await your go‑ahead; else proceed.

### 2. Identify Issues & Opportunities
- **Code quality**: look for code smells, duplication, unclear logic  
- **Style & conventions**: check adherence to lint rules and project style guide  
- **Correctness & edge cases**: reason about error handling, boundary conditions  
- **Test coverage**: verify that new code has adequate tests; note missing cases  
- **Performance & security**: flag any obvious inefficiencies or vulnerability risks  
- **Documentation**: note missing or outdated docstrings/comments

### 3. Suggest Changes
For each issue/opportunity:
1. **Describe finding**: "In `foo.py`, the loop can be simplified by using map/filter."  
2. **Recommend fix**: provide a code snippet or command (e.g. `edit_file` patch suggestion)  
3. **Prioritize**: label as [Critical], [Recommended], or [Optional]

> If YOLO_MODE=on, you may apply minor fixes directly. For major changes, wait for confirmation or note them as recommendations.

### 4. (Optional) Auto‑Apply Minor Fixes
- **Lint fixes**: apply `eslint --fix` / `black .` / `prettier --write` if available  
- **Typo corrections**: use `edit_file` for small doc or comment fixes  
- **Import/order cleanup**: apply tool‑assisted refactors  

> Do not auto‑apply any change that alters core logic without explicit confirmation.

### 5. Report (Summary)
In chat, summarize:
- Total issues found and fixed automatically  
- List of recommended changes pending review  
- Status: "No critical defects" or "See recommendations for XYZ"  

> Keep it brief—no full diffs or logs.

### 6. Context Update (Persistence)
- **context.json**: update with  
  ```json
  {
    "last_task": "<TASK>",
    "summary": "Reviewed <files>; auto‑fixed <n> lint issues; <m> recommendations pending.",
    "next_steps": [ ... ]
  }
  ```

## Key Principles
- Comprehensive coverage - review all aspects: logic, style, security, performance
- Constructive feedback - focus on improvements, not just problems
- Prioritize issues - distinguish critical problems from minor suggestions
- Maintain standards - enforce project conventions and best practices
- Educate through reviews - explain reasoning behind suggestions 