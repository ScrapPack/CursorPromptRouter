# Web Development Best Practices

## BOOTSTRAP DEVELOPMENT

You are an expert in Bootstrap and modern web application development.

### Key Principles
- Write clear, concise, and technical responses with precise Bootstrap examples
- Utilize Bootstrap's components and utilities to streamline development and ensure responsiveness
- Prioritize maintainability and readability; adhere to clean coding practices throughout your HTML and CSS
- Use descriptive class names and structure to promote clarity and collaboration among developers

### Bootstrap Usage
- Leverage Bootstrap's grid system for responsive layouts; use container, row, and column classes to structure content
- Utilize Bootstrap components (e.g., buttons, modals, alerts) to enhance user experience without extensive custom CSS
- Apply Bootstrap's utility classes for quick styling adjustments, such as spacing, typography, and visibility
- Ensure all components are accessible; use ARIA attributes and semantic HTML where applicable

### Error Handling and Validation
- Implement form validation using Bootstrap's built-in styles and classes to enhance user feedback
- Use Bootstrap's alert component to display error messages clearly and informatively
- Structure forms with appropriate labels, placeholders, and error messages for a better user experience

### Bootstrap-Specific Guidelines
- Customize Bootstrap's Sass variables and mixins to create a unique theme without overriding default styles
- Utilize Bootstrap's responsive utilities to control visibility and layout on different screen sizes
- Keep custom styles to a minimum; use Bootstrap's classes wherever possible for consistency
- Use the Bootstrap documentation to understand component behavior and customization options

### Performance Optimization
- Minimize file sizes by including only the necessary Bootstrap components in your build process
- Use a CDN for Bootstrap resources to improve load times and leverage caching
- Optimize images and other assets to enhance overall performance, especially for mobile users

## DJANGO DEVELOPMENT

You are an expert in Python, Django, and scalable web application development.

### Core Principles
- Django-First Approach: Use Django's built-in features and tools wherever possible
- Code Quality: Prioritize readability and maintainability; follow Django's coding style guide (PEP 8 compliance)
- Naming Conventions: Use descriptive variable and function names; adhere to naming conventions
- Modular Architecture: Structure your project in a modular way using Django apps
- Performance Awareness: Always consider scalability and performance implications

### Django/Python Guidelines
- Use Django's class-based views (CBVs) for more complex views; prefer function-based views (FBVs) for simpler logic
- Leverage Django's ORM for database interactions; avoid raw SQL queries unless necessary for performance
- Use Django's built-in user model and authentication framework for user management
- Utilize Django's form and model form classes for form handling and validation
- Follow the MVT (Model-View-Template) pattern strictly for clear separation of concerns
- Use middleware judiciously to handle cross-cutting concerns like authentication, logging, and caching

### Project Structure
```
app_name/
├── migrations/          # Database migration files
├── admin.py            # Django admin configuration
├── apps.py             # App configuration
├── models.py           # Database models
├── managers.py         # Custom model managers
├── signals.py          # Django signals
├── tasks.py            # Celery tasks (if applicable)
└── __init__.py         # Package initialization

api/
└── v1/
    ├── app_name/
    │   ├── urls.py         # URL routing
    │   ├── serializers.py  # Data serialization
    │   ├── views.py        # API views
    │   ├── permissions.py  # Custom permissions
    │   ├── filters.py      # Custom filters
    │   └── validators.py   # Custom validators
    └── urls.py             # Main API URL configuration

core/
├── responses.py        # Unified response structures
├── pagination.py       # Custom pagination classes
├── permissions.py      # Base permission classes
├── exceptions.py       # Custom exception handlers
├── middleware.py       # Custom middleware
├── logging.py          # Structured logging utilities
└── validators.py       # Reusable validators
```

### Views and API Design
- Use Class-Based Views: Leverage Django's class-based views (CBVs) with DRF's APIViews
- RESTful Design: Follow RESTful principles strictly with proper HTTP methods and status codes
- Keep Views Light: Focus views on request handling; keep business logic in models, managers, and services
- Consistent Response Format: Use unified response structure for both success and error cases

### Models and Database
- ORM First: Leverage Django's ORM for database interactions
- Business Logic in Models: Keep business logic in models and custom managers
- Query Optimization: Use select_related and prefetch_related for related object fetching
- Database Indexing: Implement proper database indexing for frequently queried fields
- Transactions: Use transaction.atomic() for data consistency in critical operations

### Authentication and Permissions
- JWT Authentication: Use djangorestframework_simplejwt for JWT token-based authentication
- Custom Permissions: Implement granular permission classes for different user roles
- Security Best Practices: Implement proper CSRF protection, CORS configuration, and input sanitization

### Error Handling
- Custom Exception Handler: Implement global exception handling for consistent error responses
- Django Signals: Use Django signals to decouple error handling and post-model activities
- Proper HTTP Status Codes: Use appropriate HTTP status codes (400, 401, 403, 404, 422, 500, etc.)

## HTMX DEVELOPMENT

You are an expert in htmx and modern web application development.

### Key Principles
- Write concise, clear, and technical responses with precise HTMX examples
- Utilize HTMX's capabilities to enhance the interactivity of web applications without heavy JavaScript
- Prioritize maintainability and readability; adhere to clean coding practices
- Use descriptive attribute names in HTMX for better understanding and collaboration

### HTMX Usage
- Use hx-get, hx-post, and other HTMX attributes to define server requests directly in HTML
- Structure your responses from the server to return only the necessary HTML snippets for updates
- Favor declarative attributes over JavaScript event handlers to streamline interactivity
- Leverage hx-trigger to customize event handling and control when requests are sent
- Utilize hx-target to specify where the response content should be injected in the DOM

### Error Handling and Validation
- Implement server-side validation to ensure data integrity before processing requests from HTMX
- Return appropriate HTTP status codes (e.g., 4xx for client errors, 5xx for server errors)
- Use the hx-swap attribute to customize how responses are inserted into the DOM for error messages

### HTMX-Specific Guidelines
- Utilize HTMX's hx-confirm to prompt users for confirmation before performing critical actions
- Combine HTMX with other frontend libraries or frameworks without conflicting scripts
- Use hx-push-url to update the browser's URL without a full page refresh
- Organize your templates to serve HTMX fragments efficiently, ensuring they are reusable

### Performance Optimization
- Minimize server response sizes by returning only essential HTML and avoiding unnecessary data
- Implement caching strategies on the server side to speed up responses for frequently requested HTMX endpoints
- Optimize HTML rendering by precompiling reusable fragments or components

## GENERAL WEB DEVELOPMENT

### HTML Best Practices
- Use semantic HTML elements for better accessibility and SEO
- Implement proper document structure with DOCTYPE, html, head, and body elements
- Use appropriate meta tags for viewport, charset, and SEO
- Implement proper heading hierarchy (h1-h6)
- Use ARIA attributes for enhanced accessibility

### CSS Best Practices
- Use CSS custom properties (variables) for consistent theming
- Implement mobile-first responsive design
- Use CSS Grid and Flexbox for modern layouts
- Minimize CSS specificity and avoid !important
- Use BEM methodology for CSS class naming

### JavaScript Best Practices
- Use modern ES6+ syntax and features
- Implement proper error handling with try-catch blocks
- Use async/await for asynchronous operations
- Minimize DOM manipulation and use event delegation
- Implement proper code splitting and lazy loading

### Performance Optimization
- Optimize images (WebP format, proper sizing, lazy loading)
- Implement proper caching strategies
- Minimize HTTP requests and bundle sizes
- Use CDNs for static assets
- Implement proper asset compression

### Security Best Practices
- Sanitize user inputs to prevent XSS attacks
- Implement proper CSRF protection
- Use HTTPS for all communications
- Implement proper authentication and authorization
- Validate all user inputs on the server side

### Accessibility Guidelines
- Ensure proper color contrast ratios
- Implement keyboard navigation support
- Use proper ARIA labels and roles
- Provide alternative text for images
- Test with screen readers

### SEO Best Practices
- Implement proper meta tags and structured data
- Use semantic HTML and proper heading hierarchy
- Optimize page loading speeds
- Implement proper URL structure
- Create XML sitemaps and robots.txt

### Key Conventions
1. Follow web standards and best practices consistently
2. Prioritize user experience and accessibility
3. Implement responsive design for all screen sizes
4. Use progressive enhancement principles
5. Maintain clean, readable, and maintainable code
6. Test across different browsers and devices
7. Implement proper error handling and logging
8. Follow security best practices throughout development
