---
name: "UXAudit Mode Template"
agentRequested: true
description: "User experience review, usability improvements workflow template"
---

# UXAudit Mode Template

## Overview
For user experience review, usability improvements, and frontend optimization. Use when auditing user interfaces, improving user flows, or enhancing accessibility and usability.

## Execution Workflow

### 1. Define Scope & Goals  
- "I will review the user‑facing flows and UI components for usability and clarity."  
- **Identify key flows**: list primary user tasks (e.g. signup, onboarding, search, checkout).  
- **Gather context**: reference existing wireframes, design system, or style guide.  
- **Short plan** (≤3 bullets):  
  1. Map the user journey for each flow.  
  2. Evaluate UI components against usability heuristics.  
  3. Prioritize high‑impact improvements.

> If YOLO_MODE=off, present this scope and await approval; else proceed.

### 2. Map User Journeys  
- **Diagram steps**: for each flow, document user actions and system responses in sequence.  
- **Highlight touchpoints**: identify decisions, inputs, feedback loops, and error states.  
- **Detect friction**: note confusing layouts, unclear labels, or excessive steps.

### 3. Heuristic & Accessibility Review  
- **Usability heuristics**: evaluate against Jakob's 10 heuristics (visibility of system status, consistency, error prevention, etc.).  
- **Accessibility checks**: use `axe`‑style tools or manual checks for contrast, keyboard navigation, and ARIA roles.  
- **Mobile responsiveness**: verify layouts scale and adapt on small screens.

### 4. Suggest UI/UX Improvements  
For each issue or opportunity:  
1. **Describe the problem**: "The signup form hides validation errors until after submit."  
2. **Recommend change**: provide a mockup sketch or code snippet (`edit_file` to adjust component).  
3. **Enhancement type**: label as [Critical], [Recommended], or [Optional].

> If YOLO_MODE=on, you may apply simple CSS or component updates directly; for more complex redesigns, document the recommendation.

### 5. Prototype & Iterate (Optional)  
- **Quick mockup**: modify existing components or create new variants in code.  
- **User testing**: simulate click‑through using Storybook or a basic prototype.  
- **Gather feedback**: note any usability issues for further refinement.

### 6. Validate Changes  
- **Smoke‑test flows**: manually or via automated UI tests (e.g. Cypress) to confirm new UX works.  
- **Re-run accessibility audit**: ensure fixes address earlier issues.  
- **Check responsiveness**: verify on multiple viewports.

### 7. Report & Next Steps  
In chat, provide:  
- Flows audited and key pain points found.  
- Summary of improvements applied and prototypes created.  
- Status: "All critical issues addressed; accessibility errors resolved."  
- Recommendations for further user testing or A/B experiments.

### 8. Context Update (Persistence)  
- **context.json**: update with  
  ```json
  {
    "last_task": "UX audit for <flows>",
    "summary": "Mapped user journeys, fixed X usability issues, Y accessibility errors resolved.",
    "next_steps": ["Conduct A/B test on updated signup flow", "Add UI tests for checkout"]
  }
  ```

## Key Principles
- User-centered thinking - always consider the user's perspective and goals
- Accessibility first - ensure all users can access and use the interface
- Consistency matters - maintain consistent patterns and terminology
- Test with real users - validate improvements with actual user feedback
- Iterative improvement - make incremental changes and measure impact 